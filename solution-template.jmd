---
title: "BEE 4750/5750 Homework 3"
author: "Nathan Follett (njf47)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1
Decision Variables:

x(g) installed capacity (MW) of generator type g
y(g,t) production (MW) from generator type g in period t


## Problem 1.2
The objective is to minimize the total cost of investment and operation of the expanded generation capacity

min Z = investment cost + operating cost 
= 

## Problem 1.3

## Problem 1.4

```julia

using JuMP
using HiGHS

gen_model = Model(HiGHS.Optimizer)
generators = ["geo", "coal", "ccgt", "ct", "wind", "solar"]
G = 1:length(generators)
T = 1:length(hours)

@variable(gen_model,x[G]>=0
@variable(gen_model,y[G,T]>=0)
@objective(gen_model, Min, [(investment_cost)'*x + sum((op_cost)'.*y))

avail = zeros(6,24)
avail[1,:] = thermal_cf[1]
avail[2,:] = thermal_cf[2]
avail[3,:] = thermal_cf[3]
avail[4,:] = thermal_cf[4]
avail[5,:] = wind_cf
avail[6,:] = solar_cf
avail= avail'
 
@constraint(gen_model, availability[g in G, t in T], y[g,t] <=avail[g,t]*x[g])
@constraint(gen_model, load[t in T], sum(y[:,t]) == demand[t])

print(gen_model)

```


## Problem 1.5
optimize 

slides 24-26, 28


## Problem 1.6

# Problem 2

## Problem 2.1
We need a new function objective, as well as a new constraint concerning the co2 emmissions, 
and therefore a new variable z for co2 emissions as well. 

@variable(gen_model, z[G]>=0
@constraint(gen_model, emission[t in T], sum(z[:,t]) <= 1.5

## Problem 2.2

## Problem 2.3

## Problem 2.4

## Problem 2.5

# References